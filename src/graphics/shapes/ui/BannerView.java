package graphics.shapes.ui;

import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;

import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JSeparator;
import javax.swing.SwingConstants;

import graphics.shapes.ui.component.ButtonColor;
import graphics.shapes.ui.component.ButtonShape;
import graphics.shapes.ui.component.PanelCreate;
import graphics.shapes.ui.component.PanelModification;
import graphics.shapes.ui.component.PanelColor;
import graphics.ui.Controller;
import graphics.ui.View;
import utils.Utils;

public class BannerView extends View {

	@Deprecated
	private JPanel panelSelect;
	/** The panel that contains the button to create shapes. */
	private JPanel panelCreate;
	/**
	 * The panel that contains the component which can modify the color of the
	 * shapes.
	 */
	private JPanel panelColor;
	/**
	 * The panel that contains the component which can modify the font of the text.
	 */
	private JPanel panelModification;

	/** The size of the JSeparator. */
	private static final Dimension JSEP_DIM = new Dimension(3, 50);
	/** The color of the JSeparator. */
	private static final Color JSEP_COLOR = Color.black;

	/**
	 * Creates a banner wiev.
	 * 
	 * @param model
	 *            the shapes.
	 */
	public BannerView(Object model) {
		super(model);
		try {
			this.setInterface();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Creates the interfaces displayed.
	 */
	private void setInterface() {

		// this.initPanelSelect();
		this.initPanelCreate();
		this.initPanelColor();
		this.initPanelModification();
		// this.add(this.panelSelect);
		this.add(getSeparator());
		this.add(this.panelCreate);
		this.add(getSeparator());
		this.add(this.panelColor);
		this.add(getSeparator());
		this.add(this.panelModification);

	}

	/**
	 * Initializes the modification panel.
	 */
	private void initPanelModification() {
		this.panelModification = new PanelModification(getController());
	}

	/**
	 * Creates a Jseparator.
	 */
	private JSeparator getSeparator() {
		JSeparator js = new JSeparator(SwingConstants.VERTICAL);
		js.setPreferredSize(JSEP_DIM);
		js.setForeground(JSEP_COLOR);
		return js;
	}

	/** Initializes the color panel. */
	private void initPanelColor() {
		this.panelColor = new PanelColor(getController());
	}

	@Deprecated
	private void initPanelSelect() {
		this.panelSelect = new JPanel();
		this.panelSelect.add(new ButtonShape(Utils.getIcon("mouse.png"), this.getController().doPrint()));
		this.panelSelect.add(new ButtonShape(Utils.getIcon("selection.png"), this.getController().doPrint()));
	}

	/**
	 * Initializes the creation panel.
	 */
	private void initPanelCreate() {
		this.panelCreate = new PanelCreate(getController());
	}

	@Override
	public Controller defaultController(Object model) {
		return new BannerController(model);
	}

	/**
	 * Avoid the cast.
	 */
	public BannerController getController() {
		return (BannerController) super.getController();
	}

	/**
	 * Returns the fill button.
	 * 
	 * @return The fill button.
	 */
	public ButtonColor getFillBtn() {
		return ((PanelColor) this.panelColor).getBtnc();
	}

	/***
	 * Returns the stroke button.
	 * 
	 * @return The stroke button.
	 */
	public ButtonColor getStrokeBtn() {
		return ((PanelColor) this.panelColor).getBtnc2();
	}

	/**
	 * Returns the popup generated by the fill button.
	 * 
	 * @return The popup generated by the fill button.
	 */
	public JPopupMenu getJpopupFill() {
		return ((PanelColor) this.panelColor).getJpopupFill();
	}

	/**
	 * Returns the popup generated by the stroke button.
	 * 
	 * @return The popup generated by the stroke button.
	 */
	public JPopupMenu getJpopupStroke() {
		return ((PanelColor) this.panelColor).getJpopupStroke();
	}

	/**
	 * Returns the fill button color.
	 * 
	 * @return The fill button color.
	 */
	public Color getFillBtnColor() {
		return ((PanelColor) this.panelColor).getFilledColor();
	}

	/**
	 * Returns the stroke button color.
	 * 
	 * @return The stroke button color.
	 */
	public Color getStrokeBtnColor() {
		return ((PanelColor) this.panelColor).getStrokedColor();
	}

	/**
	 * Returns the fill button color for the text.
	 * 
	 * @return The fill button color for the text.
	 */
	public boolean getFillBtnBox() {
		return ((PanelColor) this.panelColor).getFillBox();
	}

	/**
	 * Returns the stroke button color for the text.
	 * 
	 * @return The stroke button color for the text.
	 */
	public boolean getStrokeBtnBox() {
		return ((PanelColor) this.panelColor).getStrokeBox();
	}

	/**
	 * Returns the popup generated by the text button.
	 * 
	 * @return The popup generated by the text button.
	 */
	public JPopupMenu getJpopupText() {
		return ((PanelModification) this.panelModification).getJpopupText();
	}

	/**
	 * Returns the text button.
	 * 
	 * @return The text button.
	 */
	public ButtonColor getTextBtn() {
		return ((PanelModification) this.panelModification).getBtnc();
	}

	/**
	 * Returns the font size combobox.
	 * 
	 * @return The font size combobox.
	 */
	public JComboBox<Integer> getFontSizeBox() {
		return ((PanelModification) this.panelModification).getFontSizeBox();
	}

	/**
	 * Returns the font family combobox.
	 * 
	 * @return The font family combobox.
	 */
	public JComboBox<String> getFontFamilyBox() {
		return ((PanelModification) this.panelModification).getFontFamilyBox();
	}
	
	public void setFillBtnBox(boolean b) {
		((PanelColor)this.panelColor).setFilledBox(b);
	}
	
	public void setStrokeBtnBox(boolean b) {
		((PanelColor)this.panelColor).setStrokeBox(b);
	}
}
